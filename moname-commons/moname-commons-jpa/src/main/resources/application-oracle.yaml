# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html
spring:
  datasource:
    driver-class-name: oracle.jdbc.driver.OracleDriver
    #
    # https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
    hikari:
      #
      # ${auto-commit}
      # Default: true
      #auto-commit: true
      #
      # ${connection-init-sql}
      # Will be executed after every new connection creation before adding it to the pool.
      # If this SQL is not valid or throws an exception, it will be treated as a connection failure and the standard retry logic will be followed.
      # Default: none
      connection-init-sql: &connection-init-sql SELECT 1 FROM DUAL
      #
      # ${connection-test-query}
      # If your driver supports JDBC4 we strongly recommend not setting this property.
      # This is for "legacy" drivers that do not support the JDBC4 ${Connection.isValid()} API.
      # HikariCP will log an error if your driver is not JDBC4 compliant to let you know.
      # Default: none
      connection-test-query: *connection-init-sql
      #
      # ${connection-timeout}
      # The lowest acceptable connection timeout is 250ms.
      # Default: 30_000ms (30 seconds).
      #connection-timeout: 30_000
      #
      # ${idle-timeout}
      # This setting only applies when ${minimum-idle} is defined to be less than ${maximum-pool-size}.
      # The minimum allowed value is 10_000ms (10 seconds).
      # Default: 600_000ms (10 minutes).
      # A value of 0 means that idle connections are never removed from the pool.
      #idle-timeout: 600_000
      #
      # ${maximum-pool-size}
      # When the pool reaches this size, and no idle connections are available, calls to ${getConnection()} will block for up to ${connection-timeout} milliseconds before timing out.
      # Default: 10
      maximum-pool-size: &maximum-pool-size 10
      #
      # ${minimum-idle}
      # For maximum performance and responsiveness to spike demands, we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool.
      # Default: same as ${maximum-pool-size}.
      minimum-idle: *maximum-pool-size
    #
    # ${oracleucp}
    # https://docs.oracle.com/en/database/oracle/oracle-database/21/jjucp/optimizing-ucp-behavior.html
    # Database | Oracle | Oracle Database | Release 21 | Universal Connection Pool Developer's Guide | Optimizing Universal Connection Pool Behavior
    #
    # https://docs.oracle.com/en/database/oracle/oracle-database/21/jjuar/oracle/ucp/jdbc/UCPDataSource.html
    # UCPDataSource (Oracle Universal Connection Pool Java API Reference, Release 21c)
    #oracleucp:
      #connection-factory-class-name: oracle.jdbc.pool.OracleDataSource
      #connection-pool-name: ${spring.datasource.hikari.pool-name}
      #
      # ${initial-pool-size}
      # Specifies the number of available connections that are created when the connection pool is initially created or re-initialized.
      # A value of 0 indicates that no connections are pre-created.
      # Default: 0
      #initial-pool-size: *maximumPoolSize
      #
      # ${max-pool-size}
      # Specifies the maximum number of available and borrowed (in use) connections that a pool maintains.
      # A value of 0 indicates that no connections are maintained by the pool, an attempt to get a connection results in an exception.
      # Default: 0
      #max-pool-size: *maximumPoolSize
      #
      # ${min-pool-size}
      # Specifies the minimum amount of available connections and borrowed connections that a pool maintains.
      # Default: 0
      #min-pool-size: *maximumPoolSize
      #sql-for-validate-connection: *connectionInitSql
    password: moname
    #type: oracle.ucp.jdbc.UCPDataSource
    url: jdbc:oracle:thin:@oracle:1521/moname
    username: moname
  jpa:
    #
    # ${database}
    # README#org.hibernate.dialect.Database
    database: ORACLE
    database-platform: org.hibernate.dialect.OracleDialect
  sql:
    init:
      platform: oracle
